/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: iQuote API
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package sl.com.eightdigitz.client.apis

import sl.com.eightdigitz.client.models.AuthLoginResponse
import sl.com.eightdigitz.client.models.AuthRegisterResponse
import sl.com.eightdigitz.client.models.SuccessResponse
import io.reactivex.Single
import retrofit2.http.GET
import retrofit2.http.Headers
import retrofit2.http.POST
import sl.com.eightdigitz.client.models.GetOTPResponse
import java.math.BigDecimal

@JvmSuppressWildcards
interface AuthApi {
    /**
     * Logout
     * Logout the user from current device
     * The endpoint is owned by integration service owner
     * @param accept Set to &#x60;application/json&#x60; (required)
     */
    @Headers(
        "X-Operation-Id: auth_get_logout",
        "Content-Type: application/json"
    )
    @GET("logout")
    fun authGetLogout(): Single<SuccessResponse>

    /**
     * Login
     *
     * The endpoint is owned by integration service owner
     * @param accept &#x60;application/json&#x60; (required)
     * @param deviceId Unique ID of the device (required)
     * @param deviceType Type of the device &#x60;APPLE&#x60; or &#x60;ANDROID&#x60; (required)
     * @param email Email (required)
     * @param password Password (required)
     * @param devicePushToken Unique push token for the device (optional)
     */
    @retrofit2.http.FormUrlEncoded
    @Headers(
        "X-Operation-Id: auth_post_login"
    )
    @POST("login")
    fun authPostLogin(
        @retrofit2.http.Field("device_id") deviceId: String,
        @retrofit2.http.Field("device_type") deviceType: String,
        @retrofit2.http.Field("email") email: String,
        @retrofit2.http.Field("password") password: String,
        @retrofit2.http.Field("device_push_token") devicePushToken: String?
    ): Single<AuthLoginResponse>

    @retrofit2.http.FormUrlEncoded
    @POST("https://dev-ahamad.us.auth0.com/passwordless/start")
    fun getOTP(
        @retrofit2.http.Field("client_id") clientId: String,
        @retrofit2.http.Field("connection") connection: String,
        @retrofit2.http.Field("send") send: String,
        @retrofit2.http.Field("phone_number") phoneNumber: String
    ): Single<GetOTPResponse>

    /**
     * Register
     * This endpoint registers a user. If you need to update a profile image, upload the profile image in the background using `/avatar` endpoint.
     * The endpoint is owned by integration service owner
     * @param accept &#x60;application/json&#x60; (required)
     * @param deviceId Unique ID of the device (required)
     * @param deviceType Type of the device &#x60;APPLE&#x60; or &#x60;ANDROID&#x60; (required)
     * @param name Full name of user (required)
     * @param email Email address of user (required)
     * @param password Password. Must be at least 8 characters. (required)
     * @param passwordConfirmation Confirm password. Must be at least 8 characters. (required)
     * @param userType Type of user 1-business,2-client (required)
     * @param devicePushToken Unique push token for the device (optional)
     */
    @retrofit2.http.FormUrlEncoded
    @Headers(
        "X-Operation-Id: auth_post_register"
    )
    @POST("register")
    fun authPostRegister(
        @retrofit2.http.Field("device_id") deviceId: String,
        @retrofit2.http.Field("device_type") deviceType: String,
        @retrofit2.http.Field("name") name: String,
        @retrofit2.http.Field("email") email: String,
        @retrofit2.http.Field("password") password: String,
        @retrofit2.http.Field("password_confirmation") passwordConfirmation: String,
        @retrofit2.http.Field("user_type") userType: String,
        @retrofit2.http.Field("device_push_token") devicePushToken: String?
    ): Single<AuthRegisterResponse>

    /**
     * Update Password
     *
     * The endpoint is owned by integration service owner
     * @param password Password (required)
     * @param currentPassword Current password (required)
     * @param passwordConfirmation Password confirmation (required)
     * @param accept Set to &#x60;application/json&#x60; (required)
     */
    @retrofit2.http.FormUrlEncoded
    @Headers(
        "X-Operation-Id: auth_post_update_password"
    )
    @POST("password/edit")
    fun authPostUpdatePassword(
        @retrofit2.http.Field("password") password: String,
        @retrofit2.http.Field("current_password") currentPassword: String,
        @retrofit2.http.Field("password_confirmation") passwordConfirmation: String
    ): Single<SuccessResponse>

}
